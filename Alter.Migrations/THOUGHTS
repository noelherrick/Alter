TODO
Phase 1b - Command-line front-end
Move tests around
Delete copied config file on program exiting
Use annotations instead of dictionary in controller for methods

Phase 1c - Public release
Rework README's
Create a web site
Create nuget package

Phase 2a - Generisizing - Open Source
Add logic to check if for the current RDBMS DDL is transactional
Add MySQL adapter
Add SQLite adapter
Bump version to 0.2

Phase 2b - Generisizing - Closed Source
Add MS SQL adapter
Add Oracle adapter
Bump version to 0.3

Phase 3 - Powertools
Add logging throughout the tool
Figure out how to do environment-specific migrations
Automatically create diff migrations
Check diff migrations for equivalence
Database baseline / snapshots
Automatic database engine conversions (enable schema migrations to MySQL from PG or vice-versa)
Research fully all the main database engines and add specific object manipulations for them

TECHNICAL BACKLOG
Text messages from server don't get returned
Schema migrations need to be copied to bin folder
Lazily load text file SQL since we don't need the SQL at first, only the name
SchemaMigration folder has a trailing slash
Logging needs to be worked into the migration library

POSSIBILITIES
Combine Entity framework connection string

DONE
Write tests for command line
Create generic ADO.NET adapter
Allow front-end to take .config files
Apply migrations (w/ verbose option)
See ID of migrations to apply
See SQL of migrations to apply
See history of migrations
Gets the status of the database
Use dependency injection for getting the right database adapter
Create a dispatching front-end
Create a help command
Create a version command (at version 0.1)
Create a new incr migration file
Create a new diff migration file
Create a new baseline
Add API documentation
Reorganize project
Test suite for all functionality
Get migration status of database
Create migration table if there is none
Read app settings for connection string
Figure out which migrations are necessary
Allow for manual baselines
Show updates to certain version
Update the database
Update the migration table
Figure out error handling
Figure out resource handling
Change name to be unique